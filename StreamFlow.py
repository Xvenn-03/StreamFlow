#!/usr/bin/env python3
# FILE TERENKRIPSI
import base64
exec(__import__('base64').b64decode('import threading
import time
import requests
from queue import Queue
import argparse
import sys
import json
import csv
import os
from datetime import datetime
from urllib.parse import urlparse
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from colorama import Fore, init, Style

class StreamFlow:
    def __init__(self, url, num_threads=10, duration=30, timeout=5, headers=None, output=None):
        # Validasi parameter
        if duration <= 0:
            raise ValueError("Duration must be a positive number")
        if timeout <= 0:
            raise ValueError("Timeout must be a positive number")
        if num_threads <= 0:
            raise ValueError("Number of threads must be a positive number")
        
        self.url = url
        self.num_threads = num_threads
        self.duration = duration
        self.timeout = timeout
        self.output = output
        self.custom_headers = headers or {}
        self.queue = Queue()
        self.results = {
            'success': 0,
            'failure': 0,
            'total_time': 0,
            'status_codes': {},
            'response_times': []
        }
        self.lock = threading.Lock()
        self.stop_signal = False
        self.test_start_time = 0
        self.session = self._create_session()
        
    def _create_session(self):
        """Create a requests session with retry strategy"""
        session = requests.Session()
        retry_strategy = Retry(
            total=3,
            backoff_factor=0.1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy, pool_connections=100, pool_maxsize=100)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        return session
        
    def worker(self):
        """Worker thread that sends requests to the target URL"""
        while not self.stop_signal:
            try:
                start_time = time.perf_counter()
                response = self.session.get(
                    self.url, 
                    timeout=self.timeout,
                    headers=self.custom_headers,
                    allow_redirects=True
                )
                end_time = time.perf_counter()
                response_time = (end_time - start_time) * 1000  # Convert to milliseconds
                
                with self.lock:
                    if 200 <= response.status_code < 400:
                        self.results['success'] += 1
                    else:
                        self.results['failure'] += 1
                    
                    self.results['total_time'] += response_time
                    self.results['response_times'].append(response_time)
                    
                    # Track status codes
                    status_code = response.status_code
                    if status_code in self.results['status_codes']:
                        self.results['status_codes'][status_code] += 1
                    else:
                        self.results['status_codes'][status_code] = 1
                        
            except requests.exceptions.RequestException as e:
                with self.lock:
                    self.results['failure'] += 1
                    self.results['response_times'].append(0)  # Add placeholder for failed request
            except Exception as e:
                with self.lock:
                    self.results['failure'] += 1
                    self.results['response_times'].append(0)
            
    def start_test(self):
        """Main method to start the load test"""
        # Double-check duration to prevent negative sleep
        if self.duration <= 0:
            print("❌ ERROR: Invalid duration value. Must be greater than 0.")
            return
        
        self.test_start_time = time.perf_counter()
        
        print(f"🚀 STREAMFLOW - Advanced Load Testing Tool")
        print(f"🔗 Target URL: {self.url}")
        print(f"⏱️  Duration: {self.duration} seconds")
        print(f"🧵 Threads: {self.num_threads}")
        print(f"⏰ Timeout: {self.timeout} seconds")
        print("=" * 60)
        print("🌊 Starting traffic flow...\n")
        
        # Start all threads
        threads = []
        for i in range(self.num_threads):
            t = threading.Thread(target=self.worker, name=f"StreamFlow-Thread-{i+1}")
            t.daemon = True
            t.start()
            threads.append(t)
        
        # Display progress during the test
        self.display_progress()
        
        # Run for the specified duration (with additional validation)
        if self.duration > 0:
            time.sleep(self.duration)
        else:
            print("⚠️  Warning: Duration is 0, test will run until interrupted")
            while not self.stop_signal:
                time.sleep(1)
        
        self.stop_signal = True
        
        # Wait for all threads to complete
        for t in threads:
            t.join(timeout=1.0)
            
        # Calculate statistics
        self.calculate_results()
        
        # Export results if requested
        if self.output:
            self.export_results()
            
    def display_progress(self):
        """Display progress during the test execution"""
        elapsed = 0
        last_count = 0
        
        while elapsed < self.duration and not self.stop_signal:
            time.sleep(1)
            elapsed += 1
            with self.lock:
                total = self.results['success'] + self.results['failure']
                current_rps = total - last_count
                last_count = total
                avg_rps = total / elapsed if elapsed > 0 else 0
                
            sys.stdout.write(f"\r📊 Progress: {elapsed:03d}/{self.duration:03d}s | "
                           f"Requests: {total:06d} | "
                           f"Current RPS: {current_rps:04d} | "
                           f"Avg RPS: {avg_rps:06.1f}")
            sys.stdout.flush()
        
        print()
    
    def calculate_results(self):
        """Calculate and display final test results"""
        total_requests = self.results['success'] + self.results['failure']
        avg_time = (self.results['total_time'] / total_requests) if total_requests > 0 else 0
        rps = total_requests / self.duration if self.duration > 0 else 0
        success_rate = (self.results['success'] / total_requests * 100) if total_requests > 0 else 0
        
        # Calculate percentiles
        response_times = sorted(self.results['response_times'])
        if response_times:
            p50 = response_times[int(len(response_times) * 0.5)] if response_times else 0
            p90 = response_times[int(len(response_times) * 0.9)] if response_times else 0
            p95 = response_times[int(len(response_times) * 0.95)] if response_times else 0
            p99 = response_times[int(len(response_times) * 0.99)] if response_times else 0
        else:
            p50 = p90 = p95 = p99 = 0
        
        # Display results
        print("\n" + "=" * 60)
        print("📈 STREAMFLOW - TEST RESULTS")
        print("=" * 60)
        print(f"✅ Successful requests: {self.results['success']:>10}")
        print(f"❌ Failed requests:     {self.results['failure']:>10}")
        print(f"📦 Total requests:      {total_requests:>10}")
        print(f"🎯 Success rate:        {success_rate:>9.2f}%")
        print(f"⚡ Average response:    {avg_time:>9.2f} ms")
        print(f"📊 50th percentile:     {p50:>9.2f} ms")
        print(f"📊 90th percentile:     {p90:>9.2f} ms")
        print(f"📊 95th percentile:     {p95:>9.2f} ms")
        print(f"📊 99th percentile:     {p99:>9.2f} ms")
        print(f"🚀 Requests per second: {rps:>9.2f}")
        
        # Display status code distribution
        if self.results['status_codes']:
            print("\n📋 Status Code Distribution:")
            for code, count in sorted(self.results['status_codes'].items()):
                percentage = (count / total_requests * 100) if total_requests > 0 else 0
                print(f"   {code}: {count:>8} requests ({percentage:5.1f}%)")
        
        print("=" * 60)
        
        # Performance assessment
        if success_rate > 95 and avg_time < 500:
            print("💪 PERFORMANCE: EXCELLENT - System handling load well")
        elif success_rate > 85 and avg_time < 1000:
            print("👍 PERFORMANCE: GOOD - Acceptable performance under load")
        elif success_rate > 70:
            print("⚠️  PERFORMANCE: FAIR - System showing strain")
        else:
            print("🔴 PERFORMANCE: POOR - System struggling with load")
    
    def export_results(self):
        """Export test results to file"""
        try:
            if self.output.lower().endswith('.json'):
                with open(self.output, 'w') as f:
                    json.dump(self.results, f, indent=2)
                print(f"📁 Results exported to {self.output} (JSON)")
            elif self.output.lower().endswith('.csv'):
                with open(self.output, 'w', newline='') as f:
                    writer = csv.writer(f)
                    writer.writerow(['Metric', 'Value'])
                    writer.writerow(['Successful requests', self.results['success']])
                    writer.writerow(['Failed requests', self.results['failure']])
                    writer.writerow(['Total requests', self.results['success'] + self.results['failure']])
                    writer.writerow(['Total duration (s)', self.duration])
                    writer.writerow(['Average response time (ms)', 
                                   self.results['total_time'] / (self.results['success'] + self.results['failure']) 
                                   if (self.results['success'] + self.results['failure']) > 0 else 0])
                print(f"📁 Results exported to {self.output} (CSV)")
            else:
                print("❌ Unsupported output format. Use .json or .csv")
        except Exception as e:
            print(f"❌ Error exporting results: {e}")

def validate_url(url):
    """Validate the provided URL"""
    try:
        result = urlparse(url)
        return all([result.scheme in ['http', 'https'], result.netloc])
    except:
        return False

def parse_headers(header_args):
    """Parse custom headers from command line arguments"""
    headers = {}
    if header_args:
        for header in header_args:
            if ':' in header:
                key, value = header.split(':', 1)
                headers[key.strip()] = value.strip()
    return headers

if __name__ == "__main__":
    # ASCII Art Banner
    os.system("clear")
    print(Fore.MAGENTA+'''
░░░█▀▀░▀█▀░█▀▄░█▀▀░█▀█░█▄█░█▀▀░█░░░█▀█░█░█
░░░▀▀█░░█░░█▀▄░█▀▀░█▀█░█░█░█▀▀░█░░░█░█░█▄█
░░░▀▀▀░░▀░░▀░▀░▀▀▀░▀░▀░▀░▀░▀░░░▀▀▀░▀▀▀░▀░▀
'''+Fore.WHITE+'''---> Github: Xvenn-03
'''+Style.RESET_ALL)
    parser = argparse.ArgumentParser(
        description='StreamFlow - Advanced HTTP Load Testing Tool',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  python streamflow.py https://example.com
  python streamflow.py https://example.com -t 50 -d 60 -to 10
  python streamflow.py https://example.com -t 100 -d 120 -H "User-Agent: StreamFlow-Tester" -o results.json
        '''
    )
    
    parser.add_argument('url', help='Target URL to test (include http:// or https://)')
    parser.add_argument('-t', '--threads', type=int, default=10, 
                       help='Number of concurrent threads (default: 10)')
    parser.add_argument('-d', '--duration', type=int, default=30,
                       help='Test duration in seconds (default: 30)')
    parser.add_argument('-to', '--timeout', type=int, default=5,
                       help='Request timeout in seconds (default: 5)')
    parser.add_argument('-H', '--header', action='append', 
                       help='Custom headers (format: "Header-Name: value")')
    parser.add_argument('-o', '--output', 
                       help='Export results to file (JSON or CSV format)')
    
    args = parser.parse_args()
    
    # Validasi input values
    if args.duration <= 0:
        print("❌ ERROR: Duration must be a positive number (greater than 0)")
        exit(1)
        
    if args.timeout <= 0:
        print("❌ ERROR: Timeout must be a positive number (greater than 0)")
        exit(1)
        
    if args.threads <= 0:
        print("❌ ERROR: Threads must be a positive number (greater than 0)")
        exit(1)
    
    # URL validation
    if not validate_url(args.url):
        print("❌ ERROR: Invalid URL. Must be a valid HTTP/HTTPS URL.")
        exit(1)
    
    # Parse custom headers
    custom_headers = parse_headers(args.header)
    
    # Ownership confirmation
    domain = urlparse(args.url).netloc
    print("⚠️ LEGAL NOTICE: Ensure you have permission to test this website!")
    print(f"🌐 Target domain: {domain}")
    print(f"🕒 Test duration: {args.duration} seconds")
    print(f"🧵 Concurrent threads: {args.threads}")
    
    if custom_headers:
        print("📋 Custom headers:")
        for key, value in custom_headers.items():
            print(f"   {key}: {value}")
    
    print("\nBy using StreamFlow, you agree that:")
    print("1. You have authorization to test the target website")
    print("2. You accept all responsibility for your actions")
    print("3. You will follow the github account Xvenn-03")
    
    confirmation = input("\nType 'AGREE' to continue or any other key to cancel: ")
    
    if confirmation.upper() != 'AGREE':
        print("❌ Test cancelled.")
        exit(0)
    
    # Initialize and run tester
    try:
        tester = StreamFlow(
            args.url, 
            args.threads, 
            args.duration, 
            args.timeout,
            custom_headers,
            args.output
        )
        tester.start_test()
    except ValueError as e:
        print(f"❌ Validation Error: {e}")
    except KeyboardInterrupt:
        print("\n\n🛑 Test interrupted by user")
    except Exception as e:
        print(f"\n❌ Error: {str(e)}")
        import traceback
        traceback.print_exc()
').decode('utf-8'))
